@using facturacion.application.Common;
@using facturacion.application.DTOs;
@model Result<IEnumerable<ClienteDTO>>;

@{
    ViewData["Title"] = "Creación de Factura Fiscal";
}

<style>
    .container {
        background-color: #f7f7f7;
        border-radius: 10px;
        padding: 20px;
    }

    .card {
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border: none;
    }

    .card-body {
        padding: 30px;
    }

    .table {
        margin-bottom: 0;
    }

    .text-right {
        margin-top: 20px;
    }

    #tablaProductos thead th {
        background-color: #eee;
    }

    #tablaProductos tbody tr:last-child td {
        font-weight: bold;
    }

    #formFactura label {
        color: #666;
    }

    #formFactura .form-control {
        border-radius: 5px;
    }

    #formFactura button {
        border-radius: 5px;
    }

    .producto-imagen{
        width:70px;
    }

</style>

<div class="container mt-4">
    <h1 class="text-center mb-4">@ViewData["Title"]</h1>

    <!-- Botón Nuevo -->
    <div class="text-right mb-3">
        <button class="btn btn-success" id="btnNuevo">Nueva factura</button>
    </div>

    <!-- Formulario de Factura -->
    <div class="card">
        <div class="card-body">
            <form id="formFactura">
                <div class="row mb-3">
                    <!-- Sección Cliente -->
                    <div class="col-md-6">
                        <label for="clienteSelect">Cliente</label>
                        <select class="form-control" id="clienteSelect">
                            @if (Model.IsSuccess)
                            {
                                <option value="0">Seleccionar cliente</option>
                                if (Model.data.Count() > 0)
                                {
                                    foreach (var cliente in Model.data)
                                    {
                                        <option value="@cliente.Id">@cliente.RazonSocial</option>
                                    }
                                }
                            }
                            else
                            {
                                <option value="0">No se registran clientes</option>
                            }
                        </select>
                    </div>
                    <!-- Número de Factura -->
                    <div class="col-md-6">
                        <label for="numeroFactura">Número de Factura</label>
                        <input type="number" class="form-control" id="numeroFactura">
                    </div>
                </div>

                <!-- Agregar Producto -->
                <div class="text-right mb-3">
                    <button type="button" class="btn btn-primary" id="btnAgregarProducto">Agregar producto</button>
                </div>

                <!-- Tabla de Productos -->
                <table class="table table-striped" id="tablaProductos">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th>Precio Unitario</th>
                            <th>Cantidad</th>
                            <th>Imagen</th>
                            <th>Totales</th>
                        </tr>
                    </thead>
                    <tbody>
                        @* Aquí se agregarán los productos dinámicamente *@
                    </tbody>
                </table>

                <!-- Totales de la Factura -->
                <div class="text-right font-weight-bold">
                    <p>Subtotal: <span id="subtotal">0.00</span></p>
                    <p>Impuestos (19%): <span id="impuestos">0.00</span></p>
                    <p>Total: <span id="total">0.00</span></p>
                </div>

                <!-- Botón Guardar -->
                <div class="text-right">
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('btnNuevo').addEventListener('click', limpiarFormulario);
        document.getElementById('btnAgregarProducto').addEventListener('click', agregarProducto);
        document.getElementById('formFactura').addEventListener('submit', guardarFactura);
        // Agregar más listeners si es necesario
    });

    async function agregarProducto() {
        try{
            // Realizar la solicitud a la API para obtener los productos
            const response = await fetch('https://localhost:7160/api/productos/getAll');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const productos = await response.json();
            if (Array.isArray(productos) && productos.length > 0) {
                const tablaProductosBody = document.querySelector('#tablaProductos tbody');
                const row = tablaProductosBody.insertRow();
                row.innerHTML = `
                    <td>
                        <select class="form-control producto-select">
                                <option value="0" > Seleccionar producto</option>
                            ${productos.map(p => `<option value="${p.id}">${p.nombreProducto}</option>`).join('')}
                        </select>
                    </td>
                    <td><input type="number" class="form-control precio-unitario" value="0" readonly></td>
                    <td><input type="number" class="form-control cantidad-producto" value="1"></td>
                        <td class="text-center"><img src="static/default.png" class="img-fluid producto-imagen" alt="Producto"></td>
                    <td class="total-producto">0.00</td>
                `;

                // Agrega un listener para cuando se cambie el producto seleccionado
                row.querySelector('.producto-select').addEventListener('change', function (e) {
                    // Encuentra el producto seleccionado y actualiza los campos correspondientes
                    const productoSeleccionado = productos.find(p => p.id.toString() === e.target.value);
                    const precioUnitario = row.querySelector('.precio-unitario');
                    const imagenProducto = row.querySelector('.producto-imagen');

                    console.log(productoSeleccionado)

                    precioUnitario.value = productoSeleccionado.precioUnitario;
                    imagenProducto.src = productoSeleccionado.imagen !== undefined ? productoSeleccionado.imagen : "static/defaultProduct.png";
                    imagenProducto.alt = productoSeleccionado.nombreProducto;

                    // Llama a una función para actualizar el total del producto
                    actualizarTotalProducto(row);
                });

                // Agrega un listener para cuando cambie la cantidad del producto
                row.querySelector('.cantidad-producto').addEventListener('change', function () {
                    // Llama a una función para actualizar el total del producto
                    actualizarTotalProducto(row);
                });
            }
        } catch (error) {
            console.error('Error al obtener los productos:', error);
        }
    }

    function actualizarTotalProducto(row) {
        const precioUnitario = row.querySelector('.precio-unitario').value;
        const cantidad = row.querySelector('.cantidad-producto').value;
        const totalProducto = row.querySelector('.total-producto');

        totalProducto.textContent = (precioUnitario * cantidad).toFixed(2);

        // Llama a una función para actualizar el subtotal, impuestos y total
        calcularTotales();
    }

    function calcularTotales() {
        // Implementar lógica para calcular totales
    }

    function guardarFactura(event) {
        event.preventDefault();
        // Implementar lógica para guardar la factura
    }

    function limpiarFormulario() {
        // Restablece el selector de clientes a la opción por defecto
        document.getElementById('clienteSelect').value = "0";

        // Limpia el campo del número de factura
        document.getElementById('numeroFactura').value = "";

        // Limpia la tabla de productos dinámicos
        const tablaProductosBody = document.querySelector('#tablaProductos tbody');
        tablaProductosBody.innerHTML = "";

        // Resetea los totales
        document.getElementById('subtotal').textContent = "0.00";
        document.getElementById('impuestos').textContent = "0.00";
        document.getElementById('total').textContent = "0.00";

        // Si hay más campos o elementos que necesitan ser reseteados, aquí irían los comandos adicionales
    }
</script>

